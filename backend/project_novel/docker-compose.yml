version: '3.8'

services:

  redis:
    image: redis:7.2.1-alpine

  # Django service configuration
  django:
    container_name: django
    build: 
      context: .   # Current directory as build context
    command: gunicorn core.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - .:/app    # Mount the current directory to /app in the container
      - static_volume:/app/staticfiles  # Mount static_volume to /app/staticfiles in the container
    environment:  # 환경 변수
      DJANGO_SETTINGS_MODULE: core.settings
      ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
    depends_on:
      - redis # redis 서비스가 시작된 후에 django 서비스를 시작합니다.
      - db # db 서비스가 시작된 후에 django 서비스를 시작합니다.

  # Nginx service configuration
  nginx:
    image: nginx:1.25.2-alpine  # Use the specified nginx image
    container_name: project_novel-nginx  # Name of the container
    ports:
      - "80:80"  # Map port 80 of the host to port 80 of the container
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf  # Mount nginx configuration
      - static_volume:/app/staticfiles  # Mount static_volume to /app/staticfiles in the container
    depends_on:
      - django  # Depends on the django service

  # PostgreSQL database service configuration
  db:
    image: postgres:16.0  # Use the specified postgres image
    container_name: project_novel-postgres  # Name of the container
    volumes:
      - postgres_data:/var/lib/postgresql/data/  # Persistent storage for postgres data
    environment:
      - POSTGRES_DB=${DB_NAME}  # Environment variables for postgres configuration
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_HOST=${DB_HOST}
      - POSTGRES_PORT=${DB_PORT}

  celery:
    container_name: celery1
    build:
      context: .   # Current directory as build context
    command: celery --app=core worker -l INFO
    volumes:
      - .:/app    # Mount the current directory to /app in the container
      - static_volume:/app/staticfiles  # Mount static_volume to /app/staticfiles in the container
    environment:  # 환경 변수
      DJANGO_SETTINGS_MODULE: core.settings
      ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
    depends_on:
      - redis # redis 서비스가 시작된 후에 django 서비스를 시작합니다.
      - django # db 서비스가 시작된 후에 django 서비스를 시작합니다.

  celery2:
    container_name: celery2
    build:
      context: .
    command: celery --app=core worker -l INFO  # 실행할 명령을 지정합니다.
    volumes:
      - .:/app  # 필요한 볼륨을 마운트합니다.
    depends_on:
      - redis  # redis 서비스가 시작된 후에 celery2 서비스를 시작합니다.
      - django  # django 서비스가 시작된 후에 celery2 서비스를 시작합니다.


# Define the volumes
volumes:
  postgres_data:  # Volume for postgres data
  static_volume:  # Volume for static files
